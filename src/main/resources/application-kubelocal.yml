spring:
  rabbitmq:
    listener:
      simple:
        auto-startup: true
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres10:5432/blueprint-service
    username: blueprint-service
    password: shifthappens
    jooq:
      sql-dialect: POSTGRES

document:
  receiver:
    queue:
      name: blueprint-queue
  sender:
    exchange:
      name: blueprint-exchange
    dead:
      letter:
        queue: blueprint-dead-letter-queue
        routing:
          key: blueprint-dead-letter-key
        exchange:
          name: blueprint-dead-letter-exchange
    routing:
      key: blueprint-key
    queue:
      name: blueprint-queue

rabbitmq:
  host: k8s-release-rabbitmq-ha
  virtual-host: tradeshift
  port-listener: 5671

tls:
  keystore:
    location: classpath:blueprint-service.eu-west-1.test.ts.sv.pkcs12
    password: shifthappens

#Metrics
management:
  endpoints:
    web:
      exposure:
        include: metrics, health, info
    jmx:
      exposure:
        include: metrics
  endpoint:
    health:
      show-details: always

#Micrometer #Datadog #statsd
management.metrics.export.statsd.enabled: false # Whether exporting of metrics to StatsD is enabled.
management.metrics.export.statsd.flavor: datadog # StatsD line protocol to use.
management.metrics.export.statsd.port: 8125 # Port of the StatsD server to receive exported metrics.
management.metrics.export.statsd.host: datadog.monitoring # Host of the StatsD server to receive exported metrics.
# Optional
management.metrics.export.statsd.max-packet-length: 1400 # Total length of a single payload should be kept within your network's MTU.
management.metrics.export.statsd.polling-frequency: 10s # How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.
management.metrics.export.statsd.publish-unchanged-meters: true # Whether to send unchanged meters to the StatsD server.